<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADONetHelper</name>
    </assembly>
    <members>
        <member name="T:ADONetHelper.DbClient">
            <summary>
            Represents the base class for all <see cref="T:ADONetHelper.DbClient"/> classes
            </summary>
            <seealso cref="T:ADONetHelper.Core.DbProvider"/>
            <seealso cref="T:ADONetHelper.ISynchronousClient"/>
            <seealso cref="T:ADONetHelper.IAsynchronousClient"/>
            <remarks>
            DbClient is a utility class that encompasses both a <see cref="T:System.Data.Common.DbConnection"/> and a <see cref="T:System.Data.Common.DbCommand"/>
            to help query a database with minimal coding to focus on the users SQL
            </remarks>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an instance of <see cref="T:System.Data.DataTable"/> asynchronously
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">SQL query to use to build a <see cref="T:System.Data.DataTable"/></param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> of datatable</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectListAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectEnumerableAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbDataReaderAsync(System.String,System.Threading.CancellationToken,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetScalarValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns the value of the first column in the first row as <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteNonQueryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Opens the connection to a database asynchronously
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
        </member>
        <member name="F:ADONetHelper.DbClient.disposedValue">
            <summary>
            Variable To detect redundant calls of dispose
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(ADONetHelper.Core.ISqlExecutor)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with an instance of <see cref="T:ADONetHelper.Core.ISqlExecutor"/>
            </summary>
            <param name="executor">An instance of <see cref="T:ADONetHelper.Core.ISqlExecutor"/></param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,System.Data.CommandType,System.Data.Common.DbProviderFactory)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in <paramref name="connectionString"/>, and <paramref name="queryCommandType"/>, and <paramref name="factory"/>
            </summary>
            <param name="factory">An instance of a <see cref="T:System.Data.Common.DbProviderFactory"/> client class</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in <paramref name="connectionString"/> and <paramref name="factory"/>
            </summary>
            <param name="factory">An instance of the <see cref="T:System.Data.Common.DbProviderFactory"/> client class</param>
            <param name="connectionString">The connection string used to query a data store</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,System.String,System.Data.CommandType)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in with the passed in <paramref name="connectionString"/>, <paramref name="providerName"/>, and <paramref name="queryCommandType"/>
            </summary>
            <param name="providerName">The name of the data provider that the should be used to query a data store</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in <paramref name="connectionString"/> and <paramref name="providerName"/>
            </summary>
            <param name="providerName">The name of the data provider that the should be used to query a data store</param>
            <param name="connectionString">The connection string used to query a data store</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in <paramref name="providerName"/>
            </summary>
            <param name="providerName">The name of the data provider that the should be used to query a data store</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> using an existing <see cref="T:System.Data.Common.DbConnection"/> to initialize the <paramref name="connection"/>
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/> to use to query a database </param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.Data.Common.DbConnection,System.Data.CommandType)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> using an existing <see cref="T:System.Data.Common.DbConnection"/> to initialize the <paramref name="connection"/>
            </summary>
            <param name="commandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/> to use to query a database </param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,ADONetHelper.Core.IDbObjectFactory)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> using the passed in <paramref name="connectionString"/> and <paramref name="factory"/>
            </summary>
            <param name="connectionString">The connection string used to query a database</param>
            <param name="factory">An instance of <see cref="T:ADONetHelper.Core.IDbObjectFactory"/> to create the objects needed to help query a database</param>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataSet(System.String)">
            <summary>
            Gets an instance of <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="query">SQL query to use to build a <see cref="T:System.Data.DataSet"/></param>
            <returns>Returns an instance of <see cref="T:System.Data.DataSet"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataSet(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets an instance of <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <param name="query">SQL query to use to build a <see cref="T:System.Data.DataSet"/></param>
            <returns>Returns an instance of <see cref="T:System.Data.DataSet"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataTable(System.String)">
            <summary>
            Gets an instance of <see cref="T:System.Data.DataTable"/>
            </summary>
            <param name="query">SQL query to use to build a result set</param>
            <returns>Returns an instance of <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataTable(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets an instance of <see cref="T:System.Data.DataTable"/>
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <param name="query">SQL query to use to build a result set</param>
            <returns>Returns an instance of <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbDataReader(System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/> to use with the passed in <paramref name="query"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbDataReader"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbDataReader(System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            Utility method for acting on a <see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="act">Action methods that takes in a <see cref="T:System.Data.Common.DbDataReader"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetScalarValue(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a scalar value as an <see cref="T:System.Object"/> from the database
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObject``1(System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObject``1(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectEnumerable``1(System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants create to from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectEnumerable``1(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <typeparam name="T">An instance of the type the caller wants create to from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteNonQuery(System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the amount of records affected by the passed in query</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.Core.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedNonQuery(System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedNonQuery(System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="commitTransaction">Whether or not to commit the transaction that was passed in if successful</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.Core.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.Core.SQLQuery},System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="transact">An instance of a DbTransaction class</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbTransaction">
            <summary>
            Starts a <see cref="T:System.Data.Common.DbTransaction"/> using the underlying <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbTransaction"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a <see cref="T:System.Data.Common.DbTransaction"/> using the underlying <see cref="T:System.Data.Common.DbConnection"/> with the <paramref name="level"/>
            </summary>
            <param name="level">The <see cref="T:System.Data.IsolationLevel"/> to describe the locking behavior for the transaction</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbTransaction"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ChangeDatabase(System.String)">
            <summary>
            Changes the current <see cref="T:System.Data.Common.DbConnection"/> to target a different database
            </summary>
            <param name="databaseName">The name of a database as a <see cref="T:System.String"/></param>
        </member>
        <member name="M:ADONetHelper.DbClient.Close">
            <summary>
            Disposes of the <see cref="T:System.Data.Common.DbConnection"/> being used by this instance, clears any <see cref="T:System.Data.Common.DbParameter"/>
            assocatied with the current <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.Open">
            <summary>
            Opens the connection to a database
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Enlists the passed in <paramref name="transact"/> in a distributed transaction
            </summary>
            <param name="transact">An instance of <see cref="T:System.Transactions.Transaction"/> to use to enlist a distributed transaction</param>
            <remarks>
            Because it enlists a connection in a Transaction instance, EnlistTransaction takes advantage of functionality available in the System.Transactions namespace for managing distributed transactions. 
            Once a connection is explicitly enlisted in a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. 
            </remarks>
        </member>
        <member name="M:ADONetHelper.DbClient.GetSchema(System.String,System.String[])">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection"/> using the specified string for the schema name and the specified string array for the restriction values.
            </summary>
            <param name="collectionName">Name of the collection.</param>
            <param name="restrictionValues">The restriction values.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> that contains schema information</returns>
            <remarks>If the connection is associated with a transaction, executing GetSchema calls may cause some providers to throw an exception</remarks>
        </member>
        <member name="M:ADONetHelper.DbClient.GetSchema(System.String)">
            <summary>
            Returns schema information for the data source of this <paramref name="collectionName"/> using the specified string for the schema name.
            </summary>
            <param name="collectionName">Name of the collection.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> that contains schema information</returns>
            <remarks>If the connection is associated with a transaction, executing GetSchema calls may cause some providers to throw an exception</remarks>
        </member>
        <member name="M:ADONetHelper.DbClient.GetSchema">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"/> that contains schema information</returns>
            <remarks>If the connection is associated with a transaction, executing GetSchema calls may cause some providers to throw an exception</remarks>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataSourceEnumerator">
            <summary>
            Provides a mechanism for enumerating all available instances of database servers within the local network
            </summary>
            <returns>Returns a new instance of <see cref="T:System.Data.Common.DbDataSourceEnumerator"/> created by the current <see cref="T:System.Data.Common.DbProviderFactory"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.Dispose(System.Boolean)">
            <summary>
            Dispose of any unmanged resorces if disposing passed in is true 
            </summary>
            <param name="disposing">Whether or not we need to explicitly close unmanaged resources</param>
        </member>
        <member name="M:ADONetHelper.DbClient.Dispose">
            <summary>
            Dispose of any unmanged resources
            </summary>
        </member>
        <member name="T:ADONetHelper.IAsynchronousClient">
            <summary>
            Contract class that defines asynchronous operations to be performed against a data store
            </summary>
        </member>
        <member name="M:ADONetHelper.IAsynchronousClient.GetDataTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an instance of <see cref="T:System.Data.DataTable"/> asynchronously
            </summary>
            <param name="query">SQL query to use to build a <see cref="T:System.Data.DataTable"/></param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> of datatable</returns>
        </member>
        <member name="M:ADONetHelper.IAsynchronousClient.GetDataObjectAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.IAsynchronousClient.GetDataObjectEnumerableAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a list of type parameter object based on the fields in the passed in query</returns>
        </member>
        <member name="M:ADONetHelper.IAsynchronousClient.GetDataObjectListAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a list of type parameter object based on the fields in the passed in query</returns>
        </member>
        <member name="M:ADONetHelper.IAsynchronousClient.GetDbDataReaderAsync(System.String,System.Threading.CancellationToken,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.IAsynchronousClient.GetScalarValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns the value of the first column in the first row as <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:ADONetHelper.IAsynchronousClient.ExecuteNonQueryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.IAsynchronousClient.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Opens the connection to a database asynchronously
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
        </member>
        <member name="T:ADONetHelper.IMultiResultReaderAsync">
            <summary>
            Contract class for a reader that performs asynchronous read operations against a database
            </summary>
        </member>
        <member name="M:ADONetHelper.IMultiResultReaderAsync.ReadObjectEnumerableAsync``1(System.Threading.CancellationToken)">
            <summary>
            Reads the object asynchronously.
            </summary>
            <param name="token"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.IMultiResultReaderAsync.ReadObjectListAsync``1(System.Threading.CancellationToken)">
            <summary>
            Reads the object list.
            </summary>
            <param name="token"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.IMultiResultReaderAsync.ReadObjectAsync``1(System.Threading.CancellationToken)">
            <summary>
            Reads the object.
            </summary>
            <param name="token"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.IMultiResultReaderAsync.MoveToNextResultAsync(System.Threading.CancellationToken)">
            <summary>
            Moves to next result.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:ADONetHelper.IMultiResultReaderSync">
            <summary>
            Contract class for a reader that performs synchronous read operations against a database
            </summary>
        </member>
        <member name="M:ADONetHelper.IMultiResultReaderSync.ReadObjectEnumerable``1">
            <summary>
            Reads the object asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.IMultiResultReaderSync.ReadObjectList``1">
            <summary>
            Reads the object list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.IMultiResultReaderSync.ReadObject``1">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.IMultiResultReaderSync.MoveToNextResult">
            <summary>
            Moves to next result.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ADONetHelper.ISynchronousClient">
            <summary>
            Contract class that defines synchronous operations to be performed against a data store
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDataSet(System.String)">
            <summary>
            Gets an instance of <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="query">SQL query to use to build a <see cref="T:System.Data.DataSet"/></param>
            <returns>Returns an instance of <see cref="T:System.Data.DataSet"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDataSet(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets an instance of <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/></param>
            <param name="query">SQL query to use to build a <see cref="T:System.Data.DataSet"/></param>
            <returns>Returns an instance of <see cref="T:System.Data.DataSet"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDataTable(System.String)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.DataTable"/> object created from the passed in query
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Data.DataTable"/> object</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDataTable(System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.DataTable"/> object created from the passed in query
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Data.DataTable"/> object</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDataObject``1(System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDataObjectEnumerable``1(System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDataObjectEnumerable``1(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <typeparam name="T">An instance of the type the caller wants create to from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDbDataReader(System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/> to use with the passed in <paramref name="query"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDbDataReader(System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            Utility method for acting on a <see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="act">Action methods that takes in a <see cref="T:System.Data.Common.DbDataReader"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetScalarValue(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a scalar value from the database
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.ExecuteNonQuery(System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the amount of records affected by the passed in query</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.ExecuteTransactedNonQuery(System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.ExecuteTransactedNonQuery(System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="transact">An instance of a DbTransaction class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="commitTransaction">Whether or not to commit the transaction that was passed in if successful</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.Core.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.Core.SQLQuery},System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="transact">An instance of a DbTransaction class</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDbTransaction">
            <summary>
            Starts a <see cref="T:System.Data.Common.DbTransaction"/>n using the underlying <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbTransaction"/></returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.GetDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a <see cref="T:System.Data.Common.DbTransaction"/> using the underlying <see cref="T:System.Data.Common.DbConnection"/> with the <paramref name="level"/>
            </summary>
            <param name="level">The <see cref="T:System.Data.IsolationLevel"/> to describe the locking behavior for the transaction</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbTransaction"/></returns>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.Open">
            <summary>
            Closes the connection to a database
            </summary>
        </member>
        <member name="M:ADONetHelper.ISynchronousClient.Close">
            <summary>
            Closes the connection to a database
            </summary>
        </member>
        <member name="T:ADONetHelper.MultiResultReader">
            <summary>
            
            </summary>
            <seealso cref="T:ADONetHelper.IMultiResultReaderAsync"/>
            <seealso cref="T:ADONetHelper.IMultiResultReaderSync"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.#ctor(System.Data.Common.DbDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:ADONetHelper.MultiResultReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.ReadObjectListAsync``1(System.Threading.CancellationToken)">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.ReadObjectEnumerableAsync``1(System.Threading.CancellationToken)">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.ReadObjectAsync``1(System.Threading.CancellationToken)">
            <summary>
            Reads the object asynchronous.
            </summary>
            <param name="token"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.MoveToNextResultAsync(System.Threading.CancellationToken)">
            <summary>
            Moves the next to result asynchronous.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.ReadObjectEnumerable``1">
            <summary>
            Reads the object asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.ReadObjectList``1">
            <summary>
            Reads the object list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.ReadObject``1">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.MoveToNextResult">
            <summary>
            Moves to next result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:ADONetHelper.MultiResultReader.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:ADONetHelper.QueryBuilder">
            <summary>
            Utility class that builds out queries to be exectued against a database
            </summary>
        </member>
        <member name="M:ADONetHelper.QueryBuilder.CreateInsertStatement``1(System.String)">
            <summary>
            Creates a parameterized insert statement
            </summary>
            <param name="variableBinder">The binding symbol for variables and parameters for a specific RDBMS, defaults to @</param>
            <returns>Returns an ANSI standard insert statement as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:ADONetHelper.QueryBuilder.CreateUpdateStatement``1(System.String)">
            <summary>
            Creates a parameterized update statement
            </summary>
            <param name="variableBinder">The binding symbol for variables and parameters for a specific RDBMS, defaults to @</param>
            <returns>Returns an ANSI standard update statement as a <see cref="T:System.String"/></returns>
        </member>
    </members>
</doc>
